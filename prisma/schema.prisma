// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 定義 enum 類型
enum ScheduleStatus {
  ON_LEAVE     // 請假關診
  FULL         // 額滿關診
  AVAILABLE    // 尚可掛號
}

enum AppointmentStatus {
  CONFIRMED    // 已確認
  CANCELED     // 已取消
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  specialties Specialty[] // 對應的科別
}

model Specialty {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  categoryId  Int       // 外鍵，指向 Category
  category    Category   @relation(fields: [categoryId], references: [id]) // 與 Category 關聯
  doctors     Doctor[]  // 對應的醫生
}

model Doctor {
  id         Int              @id @default(autoincrement())
  name       String
  specialtyId Int       // 外鍵，指向 Specialty
  description String        // 主治專長的描述
  schedules  DoctorSchedule[] // 醫生的可用時段
  specialty   Specialty @relation(fields: [specialtyId], references: [id]) // 與 Specialty 關聯
}

model Patient {
  id          Int              @id @default(autoincrement())
  medicalId   String?          @unique
  idNumber    String           @unique
  birthDate   DateTime
  name        String
  email       String?          @unique
  password    String?
  appointments Appointment[]   // 病人的掛號
  authProvider String?
}

model DoctorSchedule {
  id                Int      @id @default(autoincrement())
  doctorId          Int      // 關聯到 Doctor 表的 doctorId
  scheduleSlot      String   // 表示具體的時段，例如 'Monday_Morning' 或 'Tuesday_Afternoon'
  date              DateTime // 表示具體日期，例如 '2024-01-01'
  maxAppointments   Int      // 該時段的最大掛號人數
  status            ScheduleStatus // 醫生排班的狀態
  doctor            Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointments      Appointment[]  // 該時段的掛號
}

model Appointment {
  id              Int              @id @default(autoincrement())
  patientId       Int              // 病人 ID
  doctorScheduleId Int             // 醫生的某個時段的 ID
  consultationNumber Int              // 看診號碼
  doctorSchedule  DoctorSchedule   @relation(fields: [doctorScheduleId], references: [id])
  status          AppointmentStatus // 預約的狀態
  patient         Patient          @relation(fields: [patientId], references: [id])
}

